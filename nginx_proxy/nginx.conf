# user의 값이 root로 되어있다면 워커프로세스를 root의 권한으로 동작시키기 떄문에, 
#워커 프로세스를 악의적 사용자가 제어하게 된다면 해당 머신을 루트 사용자의 권한으로 제어하는 꼴이 되기 떄문에 위험
user nginx;

# 워커 프로세스가를 몇개 생성할 지  지정하는 지시어
# 1이라면 모든 요청을 하나의 프로세스로 실행
worker_processes auto;

# 에러 로그를 어느 경로에 저장할 지 지정하는 것
# 뒤의 warn은 에러의 경도
error_log /var/log/nginx/error.log warn;

# nginx pid가 적혀있는 파일 위치
pid /var/run/nginx.pid;

events {
	# 몇개의 접속을 동시에 처리할 것인가 에 대한 값
	#  worker_processes * worker_connections 로 하나의 머신이 얼마나 많은 요청을 처리할 지 계산할 수 있음
	worker_connections 1024;
}

# http 트래픽을 담당하는 부분
http {
	include 		   /etc/nginx/mime.types;
	default_type    application/octet-stream;

	# 백엔드 업스트림 설정
	# 업스트림이란? server설정에서 nginx가 받아들인 요청을 어떤 서버로 흘려보내 줄 것인지 결정
	upstream vue_front {
		server 192.168.192.1:5173;
	}

	# 프론트엔드 업스트림 설정
	upstream rails_back {
		server 192.168.192.1:8000;
	}

	# server{
	# 	listen 80;
	# 	location / {
	# 		return 200 "hi";
	# 	}
	# }
	# }
	server {
		listen 80;
		server_name 127.0.0.1;
		# /api로 오는 요청을 백엔드 upstream의 /api경로로 포워딩
		location /api {
			proxy_pass http://rails_back;
			# location 안에 넣어줘야함
      		proxy_buffer_size          128k;
      		proxy_buffers              4 256k;
      		proxy_busy_buffers_size    256k;
		}

		# / 로 오는 요청을 프론트엔드 upstream의 /경로로 포워딩
		location / {
			proxy_pass http://vue_front;
			proxy_http_version 1.1;
      		proxy_set_header Upgrade $http_upgrade;
      		proxy_set_header Connection "upgrade";
      		proxy_set_header Host $host;
			# location 안에 넣어줘야함
      		proxy_buffer_size          128k;
      		proxy_buffers              4 256k;
      		proxy_busy_buffers_size    256k;
		}
	}

	log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';
	access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    keepalive_timeout  65;
    include /etc/nginx/conf.d/*.conf;
}
